{"version":3,"sources":["RoundModes.ts","PlayerRound.tsx","Round.tsx","Sheet.tsx","App.tsx","index.tsx"],"names":["RoundModes","PlayerRound","cardCount","prevRoundScore","roundMode","player","recordBid","recordScore","trickPlayedAction","undoTrickPlayedAction","tricksPlayed","winning","startingPlayer","legendaryExpansionInPlay","useState","bid","setBid","tricks","setTricks","bonus","setBonus","trickNums","Array","keys","bet","setBet","placeRascalOfRoatanBet","betAmount","score","setScore","useEffect","Completed","cardsInRound","tricksBid","tricksWon","bonusPoints","betBonus","Math","abs","calculatePlayerScoreForRound","adjustBid","bidChange","max","min","backgroundColor","Bidding","className","style","width","key","title","map","n","type","name","id","value","onClick","newbid","htmlFor","Playing","alt","src","process","placeholder","step","onChange","event","Number","target","ReactGA","initialize","Round","players","prevRoundScores","currentRound","roundCompleteAction","winningPlayers","NotYet","setRoundMode","bids","setBids","bidsComplete","setBidsComplete","totalTricksBid","setTotalTricksBid","allBidsIn","totalOfBids","forEach","p","undefined","scores","setScores","recordPlayerScore","tricksPlayedCount","setTricksPlayedCount","addToTrickCount","undoAddedTrickCount","krakenPlayed","setKrakenPlayed","includes","border","Sheet","deletePlayerAction","startGameAction","setCurrentRound","setWinningPlayers","nextRound","roundScores","startingPlayerNum","setStartingPlayerNum","highestScore","prevRound","push","playerNumber","playerpos","selectStartingPlayer","length","App","previousPlayersJson","localStorage","getItem","initialPlayers","JSON","parse","setPlayers","newPlayerName","setNewPlayerName","newPlayerFieldShown","setNewPlayerFieldShown","gameStarted","setGameStarted","setLegendaryExpansionInPlay","window","addEventListener","alertUser","removeEventListener","e","preventDefault","returnValue","checked","setItem","String","stringify","filter","fontSize","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8fc2d43.chunk.js","sourcesContent":["enum RoundModes {\r\n    NotYet = 1,\r\n    Bidding = 2,\r\n    Playing = 3,\r\n    Completed = 4\r\n}\r\n\r\nexport default RoundModes;\r\n","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport RoundModes from './RoundModes';\r\n\r\nimport './PlayerRound.css';\r\n\r\ninterface PlayerRoundProps {\r\n  cardCount: number;\r\n  prevRoundScore: number;\r\n  roundMode: RoundModes;\r\n  player: string;\r\n  recordBid: (player: string, bid: number) => void;\r\n  recordScore: (player: string, score: number) => void;\r\n  trickPlayedAction: () => void;\r\n  undoTrickPlayedAction: () => void;\r\n  tricksPlayed: number;\r\n  winning: boolean;\r\n  startingPlayer: boolean;\r\n  legendaryExpansionInPlay: boolean;\r\n}\r\n\r\nconst calculatePlayerScoreForRound = (cardsInRound: number, tricksBid: number, tricksWon: number, bonusPoints: number, bet: number) => {\r\n  let betBonus: number = 0;\r\n  if (bet > 0) {\r\n    if (tricksBid === tricksWon) {\r\n      betBonus = bet;\r\n    } else {\r\n      betBonus = -bet;\r\n    }\r\n  }\r\n  if (tricksBid === 0) {\r\n    if (tricksWon === 0) {\r\n      return 10 * cardsInRound + betBonus;\r\n    }\r\n      return -10 * cardsInRound + betBonus;\r\n  }\r\n\r\n  if (tricksBid !== tricksWon) {\r\n    return -Math.abs(tricksBid - tricksWon) * 10 + betBonus;\r\n  }\r\n  return tricksWon * 20 + bonusPoints + betBonus;\r\n}\r\n\r\nconst PlayerRound: FunctionComponent<PlayerRoundProps> = ( {cardCount, prevRoundScore, roundMode, player,\r\n  recordBid, recordScore, trickPlayedAction, undoTrickPlayedAction, tricksPlayed, winning, startingPlayer, legendaryExpansionInPlay } ) => {\r\n  let [bid, setBid] = useState(0);\r\n  let [tricks, setTricks] = useState(0);\r\n  let [bonus, setBonus] = useState(0);\r\n  let trickNums = [...Array(cardCount + 1).keys()];\r\n\r\n  const recordPlayerBid = (newbid: number): void => {\r\n    setBid(newbid);\r\n    recordBid(player, newbid);\r\n  };\r\n\r\n  let [bet, setBet] = useState(0);\r\n  const placeRascalOfRoatanBet = (betAmount: number) => {\r\n    setBet(betAmount);\r\n  };\r\n\r\n  let [score, setScore] = useState(0);\r\n  useEffect(() => {\r\n    if (roundMode === RoundModes.Completed) {\r\n      let score = calculatePlayerScoreForRound(cardCount, bid, tricks, bonus, bet);\r\n      recordScore(player, score + prevRoundScore);\r\n      setScore(score);\r\n    }\r\n  }, [roundMode, bid, bonus, player, score, prevRoundScore, recordScore, cardCount, tricks, bet]);\r\n\r\n  const trickPlayed = (): void => {\r\n    setTricks(tricks + 1);\r\n    trickPlayedAction();\r\n  };\r\n\r\n  const undoTrickPlayed = (): void => {\r\n    setTricks(tricks - 1);\r\n    undoTrickPlayedAction();\r\n  };\r\n\r\n  const bonusEntered = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setBonus(Number(event.target.value));\r\n  };\r\n\r\n  const adjustBid = (bidChange: number): void => {\r\n    setBid(Math.max(0,Math.min(bid + bidChange, cardCount)));\r\n  };\r\n\r\n  let backgroundColor =  winning ? 'rgba(255,215,0,0.6)'\r\n    : ((startingPlayer && roundMode === RoundModes.Bidding) ? 'rgba(25,25,200,0.6)' : '');\r\n  return (\r\n    <td className='PlayerRound' style={{width: 160, backgroundColor: backgroundColor}} key={player+cardCount}>\r\n    {roundMode === RoundModes.Bidding && \r\n    <div title={startingPlayer ? 'Starts round' : ''}>\r\n      {trickNums.map(n => \r\n      <>\r\n        <input key={player + n} type='radio' name={player} id={player+n} value={n} onClick={() => {recordPlayerBid(n)}}/>\r\n        <label key={player + n + 'L'} htmlFor={player + n}>{n}</label>&nbsp;<br></br>\r\n        </>\r\n      )}\r\n    </div>}\r\n\r\n    { (roundMode === RoundModes.Completed || roundMode === RoundModes.Playing) &&\r\n        <>\r\n        <span>Bid: {bid} </span>\r\n        <span>Won: {tricks} </span>\r\n        { bet > 0 && <div>Bet: {bet}</div>}\r\n        { roundMode === RoundModes.Playing &&\r\n          <div>\r\n            {tricksPlayed < cardCount &&\r\n                <button onClick={() => {\r\n                  trickPlayed()\r\n                }}>Add Trick</button>\r\n            }\r\n            {tricks > 0 &&\r\n                <button onClick={() => {\r\n                  undoTrickPlayed()\r\n                }}>Undo Trick</button>\r\n            }\r\n            {legendaryExpansionInPlay && tricks > 0 &&\r\n                <div className='dropdown'>\r\n              <button className='dropdownbutton'>\r\n                <img style={{backgroundColor: 'white'}} alt={'Pirate played'} width={16} src={process.env.PUBLIC_URL+'/Skull-And-Crossbones-Remix.svg'}/>\r\n              </button>\r\n              <div className='dropdown-content'>\r\n                <div>Use Harry the Giant</div>\r\n                <div className='dropdown-option' onClick={() => adjustBid(1)}>Raise bid by 1</div>\r\n                <div className='dropdown-option' onClick={() => adjustBid(-1)}>Lower bid by 1</div>\r\n                <div>Use Rascal of Roatan </div>\r\n                <div className='dropdown-option' onClick={() => placeRascalOfRoatanBet(10)}>Bet 10 points</div>\r\n                <div className='dropdown-option' onClick={() => placeRascalOfRoatanBet(20)}>Bet 20 points</div>\r\n             </div>\r\n            </div>\r\n            }\r\n          </div>\r\n        }\r\n        { roundMode === RoundModes.Playing && tricksPlayed === cardCount && bid === tricks && \r\n          <div>\r\n            <input placeholder='Bonus' type='number' style={{width: 48}} min='0' step='10' onChange={bonusEntered}/>\r\n          </div>\r\n        }\r\n    </>}\r\n    { roundMode === RoundModes.Completed &&\r\n    <>\r\n      { bonus > 0 && <div>Bonus: {bonus}</div>}\r\n    <div>Score: {score}</div>\r\n    <div>Total: {score + prevRoundScore}</div>\r\n    </>\r\n    }\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default PlayerRound;\r\n","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport PlayerRound from './PlayerRound';\r\nimport RoundModes from './RoundModes';\r\nimport NumberDictionary from './NumberDictionary';\r\nimport ReactGA from 'react-ga';\r\n//import './Round.css';\r\n\r\ninterface RoundProps {\r\n  cardCount: number;\r\n  players: string[];\r\n  prevRoundScores: NumberDictionary | null;\r\n  currentRound: number;\r\n  roundCompleteAction: (scores: NumberDictionary) => void;\r\n  winningPlayers: string[];\r\n  startingPlayer: string;\r\n  legendaryExpansionInPlay: boolean;\r\n}\r\n\r\nReactGA.initialize('UA-166808776-1');\r\n\r\nconst Round: FunctionComponent<RoundProps> = ( {cardCount, players, prevRoundScores,\r\n  currentRound, roundCompleteAction, winningPlayers, startingPlayer, legendaryExpansionInPlay } ) => {\r\n  const [roundMode, setRoundMode] = useState(currentRound < cardCount ?\r\n    RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\r\n\r\n  let roundComplete = () => {\r\n    setRoundMode(RoundModes.Completed);\r\n    roundCompleteAction(scores);\r\n  }\r\n  let startRound = () => {\r\n    setRoundMode(RoundModes.Playing);\r\n    if (currentRound === 1) {\r\n      ReactGA.event({\r\n        'action': 'game_started', \r\n        'category': 'game_activity',\r\n        'label': 'Players: ' + players,\r\n      });\r\n    }\r\n  }\r\n\r\n  let [bids,setBids] = useState({} as NumberDictionary);\r\n  let [bidsComplete, setBidsComplete] = useState(false);\r\n  let [totalTricksBid, setTotalTricksBid] = useState(0);\r\n  let recordBid = (player: string, bid: number) => {\r\n    bids[player] = bid;\r\n    setBids(bids);\r\n    let allBidsIn = true;\r\n    let totalOfBids = 0;\r\n    players.forEach(p => {\r\n      if (bids[p] === undefined) {\r\n        allBidsIn = false;\r\n      } else {\r\n        totalOfBids += bids[p];\r\n      }\r\n    });\r\n    setBidsComplete(allBidsIn);\r\n    setTotalTricksBid(totalOfBids);\r\n  }\r\n\r\n  let [scores, setScores] = useState({} as NumberDictionary);\r\n  let recordPlayerScore = (player: string, score: number) => {\r\n    scores[player] = score;\r\n    setScores(scores);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRoundMode(currentRound < cardCount ?\r\n      RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\r\n  }, [cardCount, currentRound]);\r\n\r\n  let [tricksPlayedCount, setTricksPlayedCount] = useState(0);\r\n  let addToTrickCount = () => {\r\n    setTricksPlayedCount(tricksPlayedCount + 1);\r\n  }\r\n  let undoAddedTrickCount = () => {\r\n    setTricksPlayedCount(tricksPlayedCount - 1);\r\n    setRoundMode(RoundModes.Playing);\r\n  }\r\n\r\n  let [krakenPlayed, setKrakenPlayed] = useState(false);\r\n  let recordKrakenPlayed = () => {\r\n    setKrakenPlayed(true);\r\n    addToTrickCount();\r\n  }\r\n\r\n  return (\r\n    <tr className=\"Round\">\r\n       <td key='cardCount'>{cardCount}{!bidsComplete && currentRound === cardCount && <div>Enter bids</div>}</td>\r\n\r\n       {players.map(p => \r\n       <PlayerRound key={p+cardCount} cardCount={cardCount} trickPlayedAction={addToTrickCount} undoTrickPlayedAction={undoAddedTrickCount} tricksPlayed={tricksPlayedCount}\r\n        prevRoundScore={prevRoundScores && prevRoundScores[p] ? prevRoundScores[p] : 0}\r\n        roundMode={roundMode} player={p} recordBid={recordBid} recordScore={recordPlayerScore}\r\n        winning={winningPlayers.includes(p) && cardCount === currentRound - 1} startingPlayer={startingPlayer === p}\r\n        legendaryExpansionInPlay={legendaryExpansionInPlay}\r\n        />\r\n       )}\r\n\r\n       <td style={{width: 50, border: 'none'}}>\r\n        { roundMode === RoundModes.Bidding && bidsComplete &&\r\n        <>\r\n        <button onClick={ () => {startRound()}}>Start Round</button>\r\n        <div style={{width: 100}}>\r\n        { totalTricksBid === cardCount ? 'Bids at par' :\r\n          (totalTricksBid < cardCount ? 'Bids ' + (cardCount - totalTricksBid) + ' under'\r\n          : 'Bids ' + (totalTricksBid - cardCount) + ' over')\r\n        }\r\n        </div>\r\n        </>\r\n        }\r\n        { roundMode === RoundModes.Playing && tricksPlayedCount < cardCount && !krakenPlayed && legendaryExpansionInPlay &&\r\n          <button onClick={() => { recordKrakenPlayed()}}>Kraken Played</button>\r\n        }\r\n\r\n        { roundMode === RoundModes.Playing && tricksPlayedCount === cardCount &&\r\n          <button onClick={() => { roundComplete()}}>Round done</button>\r\n        }\r\n       </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Round;\r\n","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Round from './Round';\r\nimport './Sheet.css';\r\nimport NumberDictionary from './NumberDictionary';\r\nimport ReactGA from 'react-ga';\r\n\r\ninterface SheetProps {\r\n  players: string[];\r\n  deletePlayerAction: (player: string) => void;\r\n  startGameAction: () => void;\r\n  legendaryExpansionInPlay: boolean;\r\n}\r\n\r\nReactGA.initialize('UA-166808776-1');\r\n\r\nconst Sheet: FunctionComponent<SheetProps> = ({players, deletePlayerAction, startGameAction, legendaryExpansionInPlay}) => {\r\n  let [currentRound, setCurrentRound] = useState(1);\r\n  let [scores, setScores] = useState([] as NumberDictionary[]);\r\n  let [winningPlayers, setWinningPlayers] = useState([] as string[]);\r\n\r\n  let nextRound = (roundScores: NumberDictionary) => {\r\n    if (currentRound === 1) {\r\n      startGameAction();\r\n    }\r\n    scores[currentRound] = roundScores;\r\n    setScores(scores);\r\n    if (currentRound === 10) {\r\n      ReactGA.event({\r\n        'action': 'game_completed', \r\n        'category': 'game_activity',\r\n        'label': 'Winners: ' + winningPlayers + ' Scores: ' + scores[currentRound],\r\n      });\r\n    } else {\r\n      setCurrentRound(currentRound+1);\r\n    }\r\n  }\r\n\r\n  let [startingPlayerNum, setStartingPlayerNum] = useState(0);\r\n  const selectStartingPlayer = (p: string): void => {\r\n    if (currentRound === 1) {\r\n      let playerNumber = 0;\r\n      let playerpos: NumberDictionary = {};\r\n      players.forEach(p => {\r\n        playerpos[p] = playerNumber++;\r\n      });\r\n      setStartingPlayerNum(playerpos[p]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let highestScore = 0;\r\n    if (currentRound > 1) {\r\n      let prevRound = currentRound - 1;\r\n      for (const player in scores[prevRound]) {\r\n        if (scores[prevRound][player] > highestScore) {\r\n          winningPlayers = [player];\r\n          highestScore = scores[prevRound][player];\r\n        } else if (scores[prevRound][player] === highestScore) {\r\n          winningPlayers.push(player);\r\n        }\r\n      }\r\n      setWinningPlayers(winningPlayers);\r\n    }\r\n  }, [scores, currentRound]);\r\n\r\n  return (\r\n    <>\r\n    {currentRound === 1 ?<h4>click player name to highlight as starting player</h4>:''}\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n        <th>Round</th>\r\n        {\r\n          players.map(p => \r\n          <th key={p} onClick={() => selectStartingPlayer(p)}>{p}&nbsp;\r\n          { currentRound === 1 && <button onClick={() => {deletePlayerAction(p)}}>&#10007;</button>}\r\n          </th>)\r\n        }\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n    { [1,2,3,4,5,6,7,8,9,10].map(n =>\r\n         <Round key={n} cardCount={n} players={players} prevRoundScores={n > 1 ? scores[n-1] : null}\r\n          currentRound={currentRound} roundCompleteAction={nextRound} winningPlayers={winningPlayers}\r\n          startingPlayer={players[(startingPlayerNum + n-1) % players.length]} legendaryExpansionInPlay={legendaryExpansionInPlay}/>\r\n      )\r\n    }\r\n    </tbody>\r\n    </table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Sheet;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Sheet from './Sheet';\r\n\r\nfunction App() {\r\n  let previousPlayersJson = localStorage.getItem('players');\r\n  let initialPlayers = ['Player 1', 'Player 2', 'Player 3'];\r\n  if (previousPlayersJson) {\r\n    initialPlayers = JSON.parse(previousPlayersJson);\r\n  }\r\n  let [players, setPlayers] = useState(initialPlayers);\r\n  let [newPlayerName, setNewPlayerName] = useState('');\r\n  let [newPlayerFieldShown, setNewPlayerFieldShown] = useState(false);\r\n  let [gameStarted, setGameStarted] = useState(false);\r\n  let [legendaryExpansionInPlay, setLegendaryExpansionInPlay] = useState(localStorage.getItem('legendaryExpansionInPlay') === 'true');\r\n\r\n  const newPlayerNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewPlayerName(event.target.value);\r\n  }\r\n\r\n  /* prevent accidental page refresh mid-game */\r\n  useEffect(() => {\r\n    window.addEventListener(\"beforeunload\", alertUser);\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", alertUser);\r\n    };\r\n  }, []);\r\n  const alertUser = (e: WindowEventMap['beforeunload']) => {\r\n    e.preventDefault();\r\n    e.returnValue = \"\";\r\n  };\r\n\r\n  const addPlayer = () => {\r\n    players.push(newPlayerName);\r\n    setPlayers(players);\r\n    setNewPlayerFieldShown(false);\r\n    localStorage.setItem('players', JSON.stringify(players));\r\n  }\r\n  const deletePlayer = (player: string) => {\r\n    setPlayers(players.filter(p => p !== player));\r\n    localStorage.setItem('players', JSON.stringify(players.filter(p => p !== player)));\r\n  }\r\n  const legendaryExpansionInPlayChanged = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setLegendaryExpansionInPlay(!legendaryExpansionInPlay);\r\n    localStorage.setItem('legendaryExpansionInPlay', String(!legendaryExpansionInPlay));\r\n  };\r\n  const startGame = () => {\r\n    setGameStarted(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-body\">\r\n      <h1>Ye New Skull King Scoresheet</h1>\r\n        { !newPlayerFieldShown && !gameStarted &&\r\n          <div>\r\n            <input id='legendary_expansion_cb' type='checkbox' checked={legendaryExpansionInPlay}\r\n             onChange={legendaryExpansionInPlayChanged} title='Adds support for the Kraken and Harry the Giant cards'/>\r\n             <label htmlFor={'legendary_expansion_cb'}>Use Legendary Expansion</label>\r\n            <button onClick={() => {setNewPlayerFieldShown(true)}}>Add player</button>\r\n          </div>\r\n        }\r\n        { newPlayerFieldShown && <>\r\n          <input type='text' placeholder='name' onChange={newPlayerNameChanged}></input>\r\n          <button onClick={addPlayer}>OK</button>\r\n          </>\r\n        }\r\n        <Sheet players={players} deletePlayerAction={deletePlayer} startGameAction={startGame} legendaryExpansionInPlay={legendaryExpansionInPlay}></Sheet>\r\n        <br/>\r\n        <div style={{fontSize: 11}}>\r\n        © 2020 Craig Fisher <a href=\"https://twitter.com/craigfis\" target='_blank' rel=\"noopener noreferrer\">@craigfis</a><br/>\r\n        <a href=\"https://github.com/Craigfis/SkullKingScorer\" target='_blank' rel=\"noopener noreferrer\">https://github.com/Craigfis/SkullKingScorer</a>\r\n        <br/>\r\n        <a href=\"https://www.grandpabecksgames.com/products-skull-king\" target='_blank' rel=\"noopener noreferrer\">What is Skull King?</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}